Build a full-stack web application named **"Online Examination System"**.

IMPORTANT RULES
- **Frontend:** React 18 + Vite, JavaScript only. All frontend files must be `.jsx` or `.js`. **No TypeScript**, no `.tsx`, no `tsconfig`.
- **Backend:** Node.js + Express, JavaScript only (`.js`).
- Write clean, human-readable, maintainable code — **avoid AI template smell** (no huge generated one-file components; split into small components, clear names, comments for key logic).
- Include a README with exact run steps.

TECH STACK (FRONTEND)
- React 18 (Vite starter)
- React Router v6+
- Redux Toolkit (JS)
- Axios for API calls
- Tailwind CSS (preferred) or Bootstrap if requested
- Framer Motion for subtle transitions
- Icons: lucide-react or react-icons
- All UI uses modern, minimal design (cards, tables, spacing). Responsive.

TECH STACK (BACKEND)
- Node.js + Express
- In-memory JSON store for demo (or json file). Easy to swap for DB later.
- JWT authentication (signing on server)
- Provide clear places to plug a real DB and secret storage.

ROLES & PAGES
- **Admin**: `/admin/*` — dashboard, manage instructors & students, manage exams, view reports.
- **Instructor**: `/instructor/*` — create/edit exams, add questions (MCQ/TF/Short), set duration, assign to students, review submissions.
- **Student**: `/student/*` — dashboard (upcoming/assigned exams), take exam (timer + autosubmit), view results & history.
- **Auth**: `/login`, `/register`

FEATURES (FRONTEND)
- Role-based routing and protected routes (ProtectedRoute component).
- Separate layouts/navbars per role.
- Redux slices: `authSlice`, `examSlice`, `attemptSlice`.
- Axios instance with auth interceptor that attaches `Authorization: Bearer <token>` from localStorage (or show commented option for httpOnly cookie approach).
- Exam UI: question navigator, per-question selection, timer component always visible, confirm before exit, autosubmit on timeout, cannot pause.
- Result UI: per-question feedback, score & percentage, history list, small charts (recharts) for summary.
- Minimal Framer Motion animations (page transitions, card hover).
- Clear folder structure:
  /src
    /components
    /layouts
    /pages
      /admin
      /instructor
      /student
      /auth
    /store
    /api
    App.jsx
    main.jsx

FEATURES (BACKEND)
- REST endpoints:
  - `POST /auth/register` → create user (role default: student)
  - `POST /auth/login` → returns `{ user, token }`
  - `GET /auth/me` → returns current user
  - `GET /exams` → list (role filtered for students)
  - `POST /exams` → create (instructor/admin)
  - `PUT /exams/:id` → update
  - `DELETE /exams/:id` → delete
  - `GET /exams/:id/questions` → list questions
  - `POST /exams/:id/questions` → add question
  - `POST /exams/:id/assign` → assign to student ids
  - `POST /attempts` → start attempt
  - `PUT /attempts/:id` → save an answer (partial)
  - `POST /attempts/:id/submit` → submit + grade
  - `GET /results/me` → student's submitted attempts
  - `GET /admin/reports` → admin stats
- Seed data: 1 admin, 1 instructor, 2 students, 1 sample exam with at least 3 questions (MCQ, TF, Short).
- In-memory DB object or `server/data.json` with read/write helper (for demo).

AI INTEGRATION (GRADING & HINTS & BASIC PROCTORING)
- Provide an `/ai/grade` server endpoint (server side). This endpoint accepts a batch of short answer items:
POST /ai/grade
body: { items: [{ qId, value, sampleAnswers, marks }] }
- **Demo behavior**: mock matching logic (case-insensitive substring match against `sampleAnswers`) and return `{ qId, score, explanation }` for each.
- **Real integration**: show commented code and a secure example using OpenAI (or other provider):
  - Read API key from `process.env.OPENAI_API_KEY` (do NOT hardcode).
  - Send a single batched prompt to the AI that asks it to grade each short answer with a short verdict and a confidence score (0–1).
  - Example prompt template (server side) for OpenAI:
    ```
    "You are a concise grader. For each item, compare student answer to sampleAnswers and return JSON array of { qId, score (0..marks), explanation }. Use simple rules and avoid hallucination. Items: <JSON items>"
    ```
  - Parse AI response and map to exam scores.
- Include error handling and request throttling notes.

- **Where to call AI**:
- Backend `/attempts/:id/submit` should call internal `aiGradeShortAnswers` that either:
  - Uses the mock grader (default for demo), or
  - Calls `/ai/grade` which then calls the external AI provider securely.
- Keep AI calls server-side (never send API key to frontend).
- Provide a `server/.env.example` showing `OPENAI_API_KEY=your_key_here`.

SECURITY & NOTES
- Use JWT secrets from env: `JWT_SECRET` in `server/.env` (README should instruct to set it).
- For demo, storing passwords as plaintext is acceptable but **add comments**: "replace with bcrypt hashing for production".
- Note on cookies: include optional commented code for httpOnly cookies approach.
- Keep CORS restricted to `http://localhost:5173` in dev example.

UI / UX constraints
- Modern minimal look, avoid obviously auto-generated scaffolding.
- Keep component granularity: e.g., `ExamCard`, `QuestionRenderer`, `Timer`, `AttemptSummary`.
- Add comments for non-trivial logic (auth flow, timer, auto-submit, AI grading).

DELIVERABLES
- A `server/` folder with `index.js` (Express demo) and `data.json` (seed) or in-memory seed structure.
- A `src/` frontend (JSX only) that runs with Vite:
- `main.jsx`
- `App.jsx` showing route map: `/login`, `/admin/dashboard`, `/instructor/dashboard`, `/student/dashboard`, `/student/exam/:id`
- README with:
- `npm install`
- `npm run server` (starts Express on 3000)
- `npm run client` (starts Vite on 5173)
- env vars required: `JWT_SECRET`, `OPENAI_API_KEY` (if using real AI)
- How to switch between demo AI grader and OpenAI grader (comment toggles)
- Seed users and sample exam preloaded so reviewer can quickly login:
- admin@example.com / admin123
- inst@example.com / inst123
- stu1@example.com / stu123
- stu2@example.com / stu123

QUALITY CONSTRAINTS
- All frontend files must be `.jsx` (no .tsx, no types).
- Keep files small and modular, add comments for complex logic.
- Avoid huge auto-generated inline CSS — prefer Tailwind utility classes or small component styles.
- Provide clear places (comments) where a reviewer can replace the mock AI with a real provider.

EXTRA (optional but preferred)
- Add a `client` script: `"client": "vite"` and `server` script: `"server": "node server/index.js"` to package.json.
- Add a simple `dev` script that runs both (e.g., using `concurrently`) if asked.
- Provide a short demo video README/GIF instructions (optional).

END
